def mergeIntervals(intervals):
    # Sort the array on the basis of start values of intervals.
    intervals.sort()
    stack = []
    
    # insert first interval into stack
    stack.append(intervals[0])
    for i in intervals[1:]:
        if stack[-1][0] <= i[0] <= stack[-1][-1]:
            stack[-1][-1] = max(stack[-1][-1], i[-1])
        else:
            stack.append(i)
  
    print("The Merged Intervals are :", end=" ")
    for i in range(len(stack)):
        print(stack[i], end=" ")
  
arr = [[6, 8], [1, 9], [2, 4], [4, 7]]
mergeIntervals(arr)

Output
The Merged Intervals are: [1,9]
Time complexity: O(n*log(n)), which is for sorting. Once the array of intervals is sorted, merging takes linear time.
Auxiliary Space: O(n)
_______________________________________________________________________________

def mergeIntervals(arr):
  
    # Sorting based on the increasing order
    # of the start intervals
    arr.sort(key=lambda x: x[0])
  
    # Stores index of last element
    # in output array (modified arr[])
    index = 0
  
    # Traverse all input Intervals starting from
    # second interval
    for i in range(1, len(arr)):
        if (arr[index][1] >= arr[i][0]):
            arr[index][1] = max(arr[index][1], arr[i][1])
        else:
            index = index + 1
            arr[index] = arr[i]
  
    print("The Merged Intervals are :", end=" ")
    for i in range(index+1):
        print(arr[i], end=" ")
        
# Driver code
arr = [[6, 8], [1, 9], [2, 4], [4, 7]]
mergeIntervals(arr)

Output
The Merged Intervals are: [1, 9] 
Time Complexity: O(n*log(n))
Auxiliary Space Complexity: O(1)

