def mergeArrays(arr1, arr2, n1, n2):
    arr3 = [None] * (n1 + n2)
    i = 0
    j = 0
    k = 0
 
    # Traverse both array
    while i < n1 and j < n2:
        if arr1[i] < arr2[j]:
            arr3[k] = arr1[i]
            k = k + 1
            i = i + 1
        else:
            arr3[k] = arr2[j]
            k = k + 1
            j = j + 1
     
 
    # Store remaining elements
    # of first array
    while i < n1:
        arr3[k] = arr1[i];
        k = k + 1
        i = i + 1
 
    # Store remaining elements
    # of second array
    while j < n2:
        arr3[k] = arr2[j];
        k = k + 1
        j = j + 1
    print("Array after merging")
    for i in range(n1 + n2):
        print(str(arr3[i]), end = " ")
 
# Driver code
arr1 = [1, 3, 5, 7]
n1 = len(arr1)
arr2 = [2, 4, 6, 8]
n2 = len(arr2)
mergeArrays(arr1, arr2, n1, n2);
 
Output: 
Array after merging
1 2 3 4 5 6 7 8
Time Complexity : O(n1 + n2) 
Auxiliary Space : O(n1 + n2)
________________________________________________________________

# Python program to merge two sorted arrays
# using maps
import bisect
 
# Function to merge arrays
def mergeArrays(a, b, n, m):
    # Declaring a map.
    # using map as a inbuilt tool
    # to store elements in sorted order.
    mp=[]
     
    # Inserting values to a map.
    for i in range(n):
        bisect.insort(mp, a[i])
         
    for i in range(m):
        bisect.insort(mp, b[i])
     
    # Printing keys of the map.
    for i in mp:
        print(i,end=' ')
         
# Driver code
arr1 = [1, 3, 5, 7]
arr2 = [2, 4, 6, 8]
size = len(arr1)
size1 = len(arr2)
 
# Function call
mergeArrays(arr1, arr2, size, size1)

Output
1 2 3 4 5 6 7 8 
Time Complexity: O( nlog(n) + mlog(m) ) 
Auxiliary Space: O(N)

