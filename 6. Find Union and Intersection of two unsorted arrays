6. Find Union and Intersection of two unsorted arrays

***UNION and INTERSECTION COMMON***

# A Python3 program to print union and intersection
# of two unsorted arrays
# Prints union of arr1[0..m-1] and arr2[0..n-1]
 
def printUnion(arr1, arr2, m, n):
    # Before finding union, make sure arr1[0..m-1]
    # is smaller
    if (m > n):
        tempp = arr1
        arr1 = arr2
        arr2 = tempp
        temp = m
        m = n
        n = temp
    # Now arr1[] is smaller
    # Sort the first array and print its elements (these two
    # steps can be swapped as order in output is not important)
    arr1.sort()
    for i in range(0, m):
        print(arr1[i], end=" ")
    # Search every element of bigger array in smaller array
    # and print the element if not found
    for i in range(0, n):
        if (binarySearch(arr1, 0, m - 1, arr2[i]) == -1):
            print(arr2[i], end=" ")
 
 
 
# Prints intersection of arr1[0..m-1] and arr2[0..n-1]
def printIntersection(arr1, arr2, m, n):
 
    # Before finding intersection, make sure arr1[0..m-1]
    # is smaller
    if (m > n):
        tempp = arr1
        arr1 = arr2
        arr2 = tempp
        temp = m
        m = n
        n = temp
    # Now arr1[] is smaller
    # Sort smaller array arr1[0..m-1]
    arr1.sort()
    # Search every element of bigger array in smaller
    # array and print the element if found
    for i in range(0, n):
        if (binarySearch(arr1, 0, m - 1, arr2[i]) != -1):
            print(arr2[i], end=" ")
 
# A recursive binary search function. It returns
# location of x in given array arr[l..r] is present,
# otherwise -1

def binarySearch(arr, l, r, x):
    if (r >= l):
        mid = int(l + (r - l)/2)
        # If the element is present at the middle itself
        if (arr[mid] == x):
            return mid
        # If element is smaller than mid, then it can only
        # be present in left subarray
        if (arr[mid] > x):
            return binarySearch(arr, l, mid - 1, x)
        # Else the element can only be present in right subarray
        return binarySearch(arr, mid + 1, r, x)
    # We reach here when element is not present in array
    return -1

# Driver code
arr1 = [7, 1, 5, 2, 3, 6]
arr2 = [3, 8, 6, 20, 7]
m = len(arr1)
n = len(arr2)
 
# Function call
print("Union of two arrays is ")
printUnion(arr1, arr2, m, n)
print("\nIntersection of two arrays is ")
printIntersection(arr1, arr2, m, n)

output:
Union of two arrays is n 3 6 7 8 20 1 5 2 
Intersection of two arrays is 7 3 6 

***********************************************************************************
method 2 common
# Python3 code to implement the approach
 
# Function to find union
def Union(a, b, n, m):
    result = [0 for _ in range(n + m)]
     
    index, left, right = 0, 0, 0
    while left<n and right<m:
        if (a[left] < b[right]):
            if(index != 0 and a[left] == result[index-1]):
                left += 1
            else:
                result[index] = a[left];
                left += 1
                index += 1
        else:
            if (index !=0 and b[right] == result[index-1]):
                right += 1
            else:
                result[index] = b[right];
                right += 1
                index += 1
         
    while(left < n):
        if(index != 0 and a[left] == result[index-1]):
            left += 1
        else:
            result[index]=a[left];
            left += 1;
            index += 1;
               
    while(right < m):
        if(index != 0 and b[right] == result[index - 1]):
            right += 1
        else:
            result[index] = b[right];
            right += 1;
            index += 1;
 
    print("Union:", *result[:index])
 
# Function to find intersection
def intersection(a, b, n, m):
    i, j, k = 0, 0, 0
    result = [0 for _ in range(n + m)]
    while i < n and j < m:
        if a[i] < b[j]:
            i += 1
        elif a[i] > b[j]:
            j += 1
        else:
            if k != 0 and a[i] == result[k - 1]:
                i += 1
                j += 1
            else:
                result[k] = a[i]
                i += 1
                j += 1
                k += 1
    print("Intersection:", *result[:k])
 
# Driver Code
a = [ 1, 3, 2, 3, 3, 4, 5, 5, 6 ];
b = [ 3, 3, 5 ];
n, m = len(a), len(b)
# sort
a.sort()
b.sort()
 
# Function call
Union(a,b,n,m);
intersection(a, b, n, m);

***********************************************************************************

****UNION only 

Method 1 (Using Set):
Union of two arrays we can get with the Set data structure very easily. 
Set is a data structure that allows only the distinct elements in it.
So, when we put the elements of both the array into the set we will get only the distinct elements 
that are equal to the union operation over the arrays. Let’s code it now –> 

def getUnion(a, n, b, m):
 
    # Defining set container s
    s =set();

    # Inserting array elements in s
    for i in range(n):
        s.add(a[i]);
 
    for i in range(m):
        s.add(b[i]);
    print("Number of elements after union operation: " , len(s) , "");
    print("The union set of both arrays is :" + "");
    print(s, end=""); # s will contain only distinct
    # elements from array a and b
 
# Driver Code
if __name__ == '__main__':
    a = [ 1, 2, 5, 6, 2, 3, 5, 7, 3 ];
    b = [ 2, 4, 5, 6, 8, 9, 4, 6, 5, 4 ];
    getUnion(a, 9, b, 10);

Output
Number of elements after union operation: 9
The union set of both arrays is :
1 2 3 4 5 6 7 8 9 

Time Complexity: O(m * log(m) + n * log(n))
Note: O(m + n) in case of Python because in python the set built-in method is quite 
      different than that of C++ once, Python uses an hash map internally.

**********************************************************************************************
 ***intersection only***
# Function to find intersection

def intersection(a, b, n, m):
    i = 0
    j = 0
    while (i < n and j < m):
        if (a[i] > b[j]):
            j += 1
        else:
            if (b[j] > a[i]):
                i += 1
            else:
                # when both are equal
                print(a[i], end=" ")
                i += 1
                j += 1

# Driver Code
if __name__ == "__main__":
    a = [1, 3, 2, 3, 4, 5, 5, 6]
    b = [3, 3, 5]
    n = len(a)
    m = len(b)
    # sort
    a.sort()
    b.sort()
     
    # function call
    intersection(a, b, n, m)

**********************************************************************************************

We can improve performance of getUnion method by iterating over both the arrays 
for index from 0 to min(n, m)-1 adding all the elements in both the arrays to the set, 
and then iterate over the other array with the remaining elements and add them to the set.

def getUnion(a, n, b, m):
   
    # Defining set container s
    hs = set()
    if(n<m):
        min=n
    else:
        min=m
         
    # add elements from both the arrays for
    # index from 0 to min(n, m)-1
    for i in range(0, min):
        hs.add(a[i])
        hs.add(b[i])
     
    if(n>m):
        for i in range(m, n):
            hs.add(a[i])
    else:
        if(n<m):
            for i in range(m, n):
                hs.add(b[i])
     
    print("Number of elements after union operation: ",len(hs))
    print("The union set of both arrays is :")
    for i in hs:
        print(i, end=" ")
    print("\n")
    # s will contain only distinct
    # elements from array a and b
 
# Driver Program
a = [1, 2, 5, 6, 2, 3, 5, 7, 3]
b = [2, 4, 5, 6, 8, 9, 4, 6, 5, 4]
n1 = len(a)
n2 = len(b)
# Function call
getUnion(a, n1, b, n2)
 
Output
Number of elements after union operation: 9
The union set of both arrays is :
[1, 2, 3, 4, 5, 6, 7, 8, 9]

Time Complexity: O( max(m,n) )
**********************************************************************************************
Method 2: (Using map data structure)

def printUnion(a , n,  b , m):
    mp = {}
     
    # Inserting array elements in mp
    for i in range(n):
        mp[a[i]] = i
 
    for i in range(m):
        mp[b[i]] = i
     
    print("The union set of both arrays is : ");
    for key in mp.keys():
        print(key,end=" ")
 
# Driver Code
a = [ 1, 2, 5, 6, 2, 3, 5 ];
b = [ 2, 4, 5, 6, 8, 9, 4, 6, 5 ];   
printUnion(a, 7, b, 9)

Output
The union set of both arrays is :
1 2 3 4 5 6 8 9 
The above method has time complexity O(m+n).
_________________________________________________________________________________________
***INTERSECTION***

